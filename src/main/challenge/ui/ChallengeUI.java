package main.challenge.ui;

import main.challenge.controllers.ChallengeController;
import main.challenge.presenters.FibonacciMakerPresenter;
import main.challenge.presenters.FizzAndFiboMakerPresenter;
import main.challenge.presenters.FizzBuzzMakerPresenter;
import main.challenge.presenters.views.FibonacciMakerView;
import main.challenge.presenters.views.FizzAndFiboMakerView;
import main.challenge.presenters.views.FizzBuzzMakerView;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;
import java.util.Properties;

public class ChallengeUI extends JFrame implements FizzBuzzMakerView, FibonacciMakerView, FizzAndFiboMakerView, ActionListener {
    private JPanel mainPanel;
    private JLabel fizzBuzzLabel;
    private JLabel fibonacciLabel;
    private JLabel fizzBonacciLabel;
    private JPanel fizzBuzzPanel;
    private JPanel fibonacciPanel;
    private JPanel fizzBonacciPanel;
    private JLabel fizzWordLabel;
    private JTextField fizzWordTextField;
    private JLabel buzzWordLabel;
    private JTextField buzzWordTextField;
    private JTextField fizzInputTextField;
    private JLabel fizzInputLabel;
    private JTextField buzzInputTextField;
    private JLabel buzzInputLabel;
    private JLabel nInputLabel;
    private JTextField nInputTextField;
    private JButton playFizzbuzzButton;
    private JTextArea textArea1;
    private JButton clearFizzbuzzButton;
    private JLabel xInputLabel;
    private JTextField xInputTextField;
    private JLabel yInputLabel;
    private JTextField yInputTextField;
    private JLabel zInputLabel;
    private JTextField zInputTextField;
    private JButton playFibonacciButton;
    private JButton clearFibonacciButton;
    private JTextArea textArea2;
    private JButton playFizzbuzznacciButton;
    private JButton clearFizzbuzznacciButton;
    private JTextArea textArea3;

    private boolean showFibonacci = true;
    private boolean isInErrorState = false;

    private ChallengeController controller = new ChallengeController();

    public ChallengeUI() {
        setContentPane(mainPanel);
        playFizzbuzzButton.addActionListener(this);
        playFibonacciButton.addActionListener(this);
        playFizzbuzznacciButton.addActionListener(this);
        setTitle("Challenge");
        setSize(750, 1000);
        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setVisible(true);

        clearFizzbuzzButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                textArea1.selectAll();
                textArea1.replaceSelection("");
            }
        });

        clearFibonacciButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                textArea2.selectAll();
                textArea2.replaceSelection("");
            }
        });

        clearFizzbuzznacciButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                textArea3.selectAll();
                textArea3.replaceSelection("");
            }
        });
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(7, 2, new Insets(0, 0, 0, 0), -1, -1));
        fizzBuzzPanel = new JPanel();
        fizzBuzzPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(8, 5, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.add(fizzBuzzPanel, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        fizzWordLabel = new JLabel();
        fizzWordLabel.setText("fizz word:");
        fizzBuzzPanel.add(fizzWordLabel, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer1 = new com.intellij.uiDesigner.core.Spacer();
        fizzBuzzPanel.add(spacer1, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_NORTH, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, 1, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        fizzWordTextField = new JTextField();
        fizzBuzzPanel.add(fizzWordTextField, new com.intellij.uiDesigner.core.GridConstraints(2, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer2 = new com.intellij.uiDesigner.core.Spacer();
        fizzBuzzPanel.add(spacer2, new com.intellij.uiDesigner.core.GridConstraints(3, 1, 1, 3, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_VERTICAL, 1, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        buzzWordLabel = new JLabel();
        buzzWordLabel.setText("buzz word:");
        fizzBuzzPanel.add(buzzWordLabel, new com.intellij.uiDesigner.core.GridConstraints(4, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        buzzWordTextField = new JTextField();
        fizzBuzzPanel.add(buzzWordTextField, new com.intellij.uiDesigner.core.GridConstraints(4, 1, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer3 = new com.intellij.uiDesigner.core.Spacer();
        fizzBuzzPanel.add(spacer3, new com.intellij.uiDesigner.core.GridConstraints(2, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        fizzInputTextField = new JTextField();
        fizzInputTextField.setText("");
        fizzBuzzPanel.add(fizzInputTextField, new com.intellij.uiDesigner.core.GridConstraints(2, 4, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        buzzInputTextField = new JTextField();
        fizzBuzzPanel.add(buzzInputTextField, new com.intellij.uiDesigner.core.GridConstraints(4, 4, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        buzzInputLabel = new JLabel();
        buzzInputLabel.setText("buzz input:");
        fizzBuzzPanel.add(buzzInputLabel, new com.intellij.uiDesigner.core.GridConstraints(4, 3, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_EAST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        fizzInputLabel = new JLabel();
        fizzInputLabel.setText("fizz input:");
        fizzBuzzPanel.add(fizzInputLabel, new com.intellij.uiDesigner.core.GridConstraints(2, 3, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_EAST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        fizzBuzzLabel = new JLabel();
        fizzBuzzLabel.setText("FIZZBUZZ");
        fizzBuzzPanel.add(fizzBuzzLabel, new com.intellij.uiDesigner.core.GridConstraints(0, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer4 = new com.intellij.uiDesigner.core.Spacer();
        fizzBuzzPanel.add(spacer4, new com.intellij.uiDesigner.core.GridConstraints(5, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_VERTICAL, 1, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        nInputLabel = new JLabel();
        nInputLabel.setText("n input:");
        fizzBuzzPanel.add(nInputLabel, new com.intellij.uiDesigner.core.GridConstraints(6, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        nInputTextField = new JTextField();
        fizzBuzzPanel.add(nInputTextField, new com.intellij.uiDesigner.core.GridConstraints(6, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        playFizzbuzzButton = new JButton();
        playFizzbuzzButton.setText("play fizzbuzz");
        fizzBuzzPanel.add(playFizzbuzzButton, new com.intellij.uiDesigner.core.GridConstraints(6, 3, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer5 = new com.intellij.uiDesigner.core.Spacer();
        fizzBuzzPanel.add(spacer5, new com.intellij.uiDesigner.core.GridConstraints(7, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_VERTICAL, 1, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        clearFizzbuzzButton = new JButton();
        clearFizzbuzzButton.setText("clear fizzbuzz");
        fizzBuzzPanel.add(clearFizzbuzzButton, new com.intellij.uiDesigner.core.GridConstraints(6, 4, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        fibonacciPanel = new JPanel();
        fibonacciPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(5, 5, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.add(fibonacciPanel, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer6 = new com.intellij.uiDesigner.core.Spacer();
        fibonacciPanel.add(spacer6, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 3, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_VERTICAL, 1, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer7 = new com.intellij.uiDesigner.core.Spacer();
        fibonacciPanel.add(spacer7, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 3, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_VERTICAL, 1, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        xInputLabel = new JLabel();
        xInputLabel.setText("x input:");
        fibonacciPanel.add(xInputLabel, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        xInputTextField = new JTextField();
        fibonacciPanel.add(xInputTextField, new com.intellij.uiDesigner.core.GridConstraints(2, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer8 = new com.intellij.uiDesigner.core.Spacer();
        fibonacciPanel.add(spacer8, new com.intellij.uiDesigner.core.GridConstraints(2, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        yInputLabel = new JLabel();
        yInputLabel.setText("y input:");
        fibonacciPanel.add(yInputLabel, new com.intellij.uiDesigner.core.GridConstraints(2, 3, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_EAST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        yInputTextField = new JTextField();
        fibonacciPanel.add(yInputTextField, new com.intellij.uiDesigner.core.GridConstraints(2, 4, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        zInputLabel = new JLabel();
        zInputLabel.setText("z input:");
        fibonacciPanel.add(zInputLabel, new com.intellij.uiDesigner.core.GridConstraints(4, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        zInputTextField = new JTextField();
        fibonacciPanel.add(zInputTextField, new com.intellij.uiDesigner.core.GridConstraints(4, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        playFibonacciButton = new JButton();
        playFibonacciButton.setText("play Fibonacci");
        fibonacciPanel.add(playFibonacciButton, new com.intellij.uiDesigner.core.GridConstraints(4, 3, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        clearFibonacciButton = new JButton();
        clearFibonacciButton.setText("clear Fibonacci");
        fibonacciPanel.add(clearFibonacciButton, new com.intellij.uiDesigner.core.GridConstraints(4, 4, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        fibonacciLabel = new JLabel();
        fibonacciLabel.setText("FIBONACCI");
        fibonacciPanel.add(fibonacciLabel, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 3, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        fizzBonacciPanel = new JPanel();
        fizzBonacciPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(3, 2, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.add(fizzBonacciPanel, new com.intellij.uiDesigner.core.GridConstraints(5, 0, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer9 = new com.intellij.uiDesigner.core.Spacer();
        fizzBonacciPanel.add(spacer9, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_VERTICAL, 1, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        playFizzbuzznacciButton = new JButton();
        playFizzbuzznacciButton.setText("play fizzbuzznacci");
        fizzBonacciPanel.add(playFizzbuzznacciButton, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        clearFizzbuzznacciButton = new JButton();
        clearFizzbuzznacciButton.setText("clear fizzbuzznacci");
        fizzBonacciPanel.add(clearFizzbuzznacciButton, new com.intellij.uiDesigner.core.GridConstraints(2, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        fizzBonacciLabel = new JLabel();
        fizzBonacciLabel.setText("FIZZBUZZNACCI");
        fizzBonacciPanel.add(fizzBonacciLabel, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        textArea1 = new JTextArea();
        mainPanel.add(textArea1, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer10 = new com.intellij.uiDesigner.core.Spacer();
        mainPanel.add(spacer10, new com.intellij.uiDesigner.core.GridConstraints(4, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_VERTICAL, 1, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        textArea2 = new JTextArea();
        mainPanel.add(textArea2, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        textArea3 = new JTextArea();
        mainPanel.add(textArea3, new com.intellij.uiDesigner.core.GridConstraints(6, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

    @Override
    public void showFizzDividendIntegerError(String error) {
        JOptionPane.showMessageDialog(this, error, "Dialog", JOptionPane.ERROR_MESSAGE);
    }

    @Override
    public void showBuzzDividendIntegerError(String error) {
        JOptionPane.showMessageDialog(this, error, "Dialog", JOptionPane.ERROR_MESSAGE);
    }

    @Override
    public void showInputValueIntegerError(String error) {
        JOptionPane.showMessageDialog(this, error, "Dialog", JOptionPane.ERROR_MESSAGE);
    }

    @Override
    public void showFizzNotPositiveIntegerError(String error) {
        JOptionPane.showMessageDialog(this, error, "Dialog", JOptionPane.ERROR_MESSAGE);
    }

    @Override
    public void showBuzzNotPositiveIntegerError(String error) {
        JOptionPane.showMessageDialog(this, error, "Dialog", JOptionPane.ERROR_MESSAGE);
    }


    @Override
    public void showInputNotPositiveIntegerError(String error) {
        JOptionPane.showMessageDialog(this, error, "Dialog", JOptionPane.ERROR_MESSAGE);
    }

    @Override
    public void showInputValueMissingError(String error) {
        JOptionPane.showMessageDialog(this, error, "Dialog", JOptionPane.ERROR_MESSAGE);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == playFizzbuzzButton) {
            displayFizzBuzz();
        } else if (e.getSource() == playFibonacciButton) {
            displayFibonacci();
        } else if (e.getSource() == playFizzbuzznacciButton) {
            showFibonacci = false;
            displayFibonacci();
            if (!isInErrorState)
                displayFizzBuzznacci();
            isInErrorState = false;
        }
    }

    @Override
    public void showXInputIntegerError(String error) {
        JOptionPane.showMessageDialog(this, error, "Dialog", JOptionPane.ERROR_MESSAGE);
        isInErrorState = true;
    }

    @Override
    public void showYInputIntegerError(String error) {
        JOptionPane.showMessageDialog(this, error, "Dialog", JOptionPane.ERROR_MESSAGE);
        isInErrorState = true;
    }

    @Override
    public void showZInputIntegerError(String error) {
        JOptionPane.showMessageDialog(this, error, "Dialog", JOptionPane.ERROR_MESSAGE);
        isInErrorState = true;
    }

    @Override
    public void showXNotPositiveIntegerError(String error) {
        JOptionPane.showMessageDialog(this, error, "Dialog", JOptionPane.ERROR_MESSAGE);
        isInErrorState = true;
    }

    @Override
    public void showYNotPositiveIntegerError(String error) {
        JOptionPane.showMessageDialog(this, error, "Dialog", JOptionPane.ERROR_MESSAGE);
        isInErrorState = true;
    }

    @Override
    public void showZNotPositiveIntegerError(String error) {
        JOptionPane.showMessageDialog(this, error, "Dialog", JOptionPane.ERROR_MESSAGE);
        isInErrorState = true;
    }

    @Override
    public void showXInputMissingError(String error) {
        JOptionPane.showMessageDialog(this, error, "Dialog", JOptionPane.ERROR_MESSAGE);
        isInErrorState = true;
    }

    @Override
    public void displayFizzBuzz(List<String> fizzBuzz) {
        setJTextArea(textArea1);

        for (String single : fizzBuzz)
            textArea1.append(single + " ");
    }

    @Override
    public void displayFibonacci(List<String> fibonacci) {
        if (showFibonacci) {
            setJTextArea(textArea2);

            for (String single : fibonacci)
                textArea2.append(single + " ");
        }
    }

    @Override
    public void displayFizzAndFibo(List<String> fizzBuzz) {
        setJTextArea(textArea3);

        for (String single : fizzBuzz)
            textArea3.append(single + " ");
    }

    private void displayFibonacci() {
        Properties properties = new Properties();
        properties.setProperty("x", xInputTextField.getText());
        properties.setProperty("y", yInputTextField.getText());
        properties.setProperty("z", zInputTextField.getText());

        FibonacciMakerPresenter response = new FibonacciMakerPresenter(this);
        controller.makeFibonacci(properties, response);
    }

    private void displayFizzBuzz() {
        Properties properties = new Properties();
        properties.setProperty("fizzPhrase", fizzWordTextField.getText());
        properties.setProperty("buzzPhrase", buzzWordTextField.getText());
        properties.setProperty("fizzDividend", fizzInputTextField.getText());
        properties.setProperty("buzzDividend", buzzInputTextField.getText());
        properties.setProperty("input", nInputTextField.getText());

        FizzBuzzMakerPresenter response = new FizzBuzzMakerPresenter(this);
        controller.makeFizzBuzz(properties, response);
    }

    private void displayFizzBuzznacci() {
        Properties properties = new Properties();
        properties.setProperty("fizzPhrase", fizzWordTextField.getText());
        properties.setProperty("buzzPhrase", buzzWordTextField.getText());
        properties.setProperty("fizzDividend", fizzInputTextField.getText());
        properties.setProperty("buzzDividend", buzzInputTextField.getText());

        FizzAndFiboMakerPresenter response = new FizzAndFiboMakerPresenter(this);
        controller.makeFizzAndFibo(properties, response);
    }

    private void setJTextArea(JTextArea textArea1) {
        textArea1.selectAll();
        textArea1.replaceSelection("");
        textArea1.setFont(new Font("Arial", Font.BOLD, 18));
        textArea1.setLineWrap(true);
        textArea1.setWrapStyleWord(true);
    }
}
